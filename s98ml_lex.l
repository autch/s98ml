/* -*- mode: c; tab-width: 8; -*- */

%{
    #include <stdint.h>
    #include <stdio.h>
    #include <string.h>

    /* generated by Bison, then automake renamed it */
    #include "s98ml_parse.h"
%}

%option bison-bridge
%option header-file="s98ml_lex.h"

%x string
%x comment

LOOP_START	\[
LOOP_END	\]
HEX		\$[0-9a-fA-F]+
OCT		\&[0-7]+
DEC		\#?[0-9]+
BIN		\'[01]+
HEX_PAIR	[0-9a-fA-F]{2}:[0-9a-fA-F]{2}

EOL		\n

COLON		\:
COMMA		\,
SLASH		\/


VERSION		#version
TIMER		#timer
TAG		#tag
DEVICE		#device
ENCODING	#encoding

PART		[A-Z]

SYMBOL		[_a-zA-Z0-9]+

%%

<<EOF>>		{ printf("EOF\n"); return 0; }

";"		{ BEGIN(comment); yymore(); }
<comment>{EOL}  { printf("COMMENT: %s\n", yytext); BEGIN(INITIAL); return EOL; }
<comment>[^\n]+ { yymore(); }

\"		{ BEGIN(string); yymore(); }
<string>{EOL}	{ fprintf(stderr, "unterminated quote: %s_n", yytext); BEGIN(INITIAL); return EOL; }
<string>([^\"\n]|\\\"|\\\n)+	{ yymore(); }
<string>\"	{ printf("STRING: %s\n", yytext); BEGIN(INITIAL); return STRING; }

^{VERSION}	{ printf("VER: %s\n", yytext); return VERSION; }
^{TIMER}	{ printf("TIMER: %s\n", yytext); return TIMER; }
^{TAG}		{ printf("TAG: %s\n", yytext); return TAG; }
^{DEVICE}	{ printf("DEV: %s\n", yytext); return DEVICE; }
^{ENCODING}	{ printf("ENC: %s\n", yytext); return ENCODING; }

{HEX}		{ printf("HEX: %s\n", yytext); }
{OCT}		{ printf("OCT: %s\n", yytext); }
{DEC}		{ printf("DEC: %s\n", yytext); }
{BIN}		{ printf("BIN: %s\n", yytext); }
{HEX_PAIR}	{ printf("HP: %s\n", yytext); return HEX_PAIR; }

{COLON}		{ printf("COLON: %s\n", yytext); return COLON; }
{COMMA}		{ printf("COMMA: %s\n", yytext); return COMMA; }
^{SLASH}	{ printf("SYNC: %s\n", yytext); return SYNC; }
{SLASH}		{ printf("SLASH: %s\n", yytext); return SLASH; }

^{LOOP_START}	{ printf("LOOP: %s\n", yytext); return LOOP_START; }
^{LOOP_END}	{ printf("END: %s\n", yytext); return LOOP_END; }

^{PART}		{ printf("PART: %s\n", yytext); return PART; }

{SYMBOL}	{ printf("SYMBOL: %s\n", yytext); return SYMBOL; }

{EOL}		{ printf("//\n"); return EOL; }

[[:blank:]]+	{ /* eat up all spaces */ }

.		{ printf("unrecognized token: \"%s\"\n", yytext); }
